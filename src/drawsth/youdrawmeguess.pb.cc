// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youdrawmeguess.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "youdrawmeguess.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace youdrawmeguess {

namespace {

const ::google::protobuf::Descriptor* Connect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Connect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomOpera_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomOpera_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomOpera_RoomOperaType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RoomCallback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomCallback_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomMessage_RoomMessType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_youdrawmeguess_2eproto() {
  protobuf_AddDesc_youdrawmeguess_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "youdrawmeguess.proto");
  GOOGLE_CHECK(file != NULL);
  Connect_descriptor_ = file->message_type(0);
  static const int Connect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, mess_id_),
  };
  Connect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Connect_descriptor_,
      Connect::default_instance_,
      Connect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Connect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Connect));
  RoomOpera_descriptor_ = file->message_type(1);
  static const int RoomOpera_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOpera, mess_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOpera, type_),
  };
  RoomOpera_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomOpera_descriptor_,
      RoomOpera::default_instance_,
      RoomOpera_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOpera, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomOpera, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomOpera));
  RoomOpera_RoomOperaType_descriptor_ = RoomOpera_descriptor_->enum_type(0);
  RoomCallback_descriptor_ = file->message_type(2);
  static const int RoomCallback_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCallback, mess_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCallback, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCallback, playersmess_),
  };
  RoomCallback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomCallback_descriptor_,
      RoomCallback::default_instance_,
      RoomCallback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCallback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCallback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomCallback));
  RoomMessage_descriptor_ = file->message_type(3);
  static const int RoomMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessage, mess_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessage, message_),
  };
  RoomMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMessage_descriptor_,
      RoomMessage::default_instance_,
      RoomMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMessage));
  RoomMessage_RoomMessType_descriptor_ = RoomMessage_descriptor_->enum_type(0);
  Ack_descriptor_ = file->message_type(4);
  static const int Ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, mess_id_),
  };
  Ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ack_descriptor_,
      Ack::default_instance_,
      Ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_youdrawmeguess_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Connect_descriptor_, &Connect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomOpera_descriptor_, &RoomOpera::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomCallback_descriptor_, &RoomCallback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMessage_descriptor_, &RoomMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ack_descriptor_, &Ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_youdrawmeguess_2eproto() {
  delete Connect::default_instance_;
  delete Connect_reflection_;
  delete RoomOpera::default_instance_;
  delete RoomOpera_reflection_;
  delete RoomCallback::default_instance_;
  delete RoomCallback_reflection_;
  delete RoomMessage::default_instance_;
  delete RoomMessage_reflection_;
  delete Ack::default_instance_;
  delete Ack_reflection_;
}

void protobuf_AddDesc_youdrawmeguess_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024youdrawmeguess.proto\022\016youdrawmeguess\"7"
    "\n\007Connect\022\n\n\002id\030\001 \001(\003\022\017\n\007session\030\002 \001(\t\022\017"
    "\n\007mess_id\030\003 \001(\t\"\200\001\n\tRoomOpera\022\017\n\007mess_id"
    "\030\001 \001(\t\0225\n\004type\030\002 \001(\0162\'.youdrawmeguess.Ro"
    "omOpera.RoomOperaType\"+\n\rRoomOperaType\022\010"
    "\n\004JOIN\020\000\022\010\n\004QUIT\020\001\022\006\n\002OK\020\002\"D\n\014RoomCallba"
    "ck\022\017\n\007mess_id\030\001 \001(\t\022\016\n\006roomId\030\002 \001(\005\022\023\n\013p"
    "layersmess\030\003 \001(\t\"\270\001\n\013RoomMessage\022\017\n\007mess"
    "_id\030\001 \001(\t\0226\n\004type\030\002 \001(\0162(.youdrawmeguess"
    ".RoomMessage.RoomMessType\022\017\n\007message\030\003 \001"
    "(\t\"O\n\014RoomMessType\022\t\n\005PJOIN\020\000\022\t\n\005PQUIT\020\001"
    "\022\007\n\003POK\020\002\022\n\n\006PSTART\020\003\022\t\n\005PMESS\020\004\022\t\n\005PTIM"
    "E\020\005\"\026\n\003Ack\022\017\n\007mess_id\030\001 \001(\t", 507);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "youdrawmeguess.proto", &protobuf_RegisterTypes);
  Connect::default_instance_ = new Connect();
  RoomOpera::default_instance_ = new RoomOpera();
  RoomCallback::default_instance_ = new RoomCallback();
  RoomMessage::default_instance_ = new RoomMessage();
  Ack::default_instance_ = new Ack();
  Connect::default_instance_->InitAsDefaultInstance();
  RoomOpera::default_instance_->InitAsDefaultInstance();
  RoomCallback::default_instance_->InitAsDefaultInstance();
  RoomMessage::default_instance_->InitAsDefaultInstance();
  Ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_youdrawmeguess_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_youdrawmeguess_2eproto {
  StaticDescriptorInitializer_youdrawmeguess_2eproto() {
    protobuf_AddDesc_youdrawmeguess_2eproto();
  }
} static_descriptor_initializer_youdrawmeguess_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Connect::kIdFieldNumber;
const int Connect::kSessionFieldNumber;
const int Connect::kMessIdFieldNumber;
#endif  // !_MSC_VER

Connect::Connect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youdrawmeguess.Connect)
}

void Connect::InitAsDefaultInstance() {
}

Connect::Connect(const Connect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youdrawmeguess.Connect)
}

void Connect::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Connect::~Connect() {
  // @@protoc_insertion_point(destructor:youdrawmeguess.Connect)
  SharedDtor();
}

void Connect::SharedDtor() {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (this != default_instance_) {
  }
}

void Connect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Connect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Connect_descriptor_;
}

const Connect& Connect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_youdrawmeguess_2eproto();
  return *default_instance_;
}

Connect* Connect::default_instance_ = NULL;

Connect* Connect::New() const {
  return new Connect;
}

void Connect::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_->clear();
      }
    }
    if (has_mess_id()) {
      if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mess_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Connect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youdrawmeguess.Connect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }

      // optional string session = 2;
      case 2: {
        if (tag == 18) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mess_id;
        break;
      }

      // optional string mess_id = 3;
      case 3: {
        if (tag == 26) {
         parse_mess_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mess_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mess_id().data(), this->mess_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mess_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youdrawmeguess.Connect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youdrawmeguess.Connect)
  return false;
#undef DO_
}

void Connect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youdrawmeguess.Connect)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session(), output);
  }

  // optional string mess_id = 3;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mess_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youdrawmeguess.Connect)
}

::google::protobuf::uint8* Connect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:youdrawmeguess.Connect)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }

  // optional string mess_id = 3;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mess_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youdrawmeguess.Connect)
  return target;
}

int Connect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }

    // optional string mess_id = 3;
    if (has_mess_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mess_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Connect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Connect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Connect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Connect::MergeFrom(const Connect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_mess_id()) {
      set_mess_id(from.mess_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Connect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Connect::CopyFrom(const Connect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connect::IsInitialized() const {

  return true;
}

void Connect::Swap(Connect* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(session_, other->session_);
    std::swap(mess_id_, other->mess_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Connect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Connect_descriptor_;
  metadata.reflection = Connect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoomOpera_RoomOperaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomOpera_RoomOperaType_descriptor_;
}
bool RoomOpera_RoomOperaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoomOpera_RoomOperaType RoomOpera::JOIN;
const RoomOpera_RoomOperaType RoomOpera::QUIT;
const RoomOpera_RoomOperaType RoomOpera::OK;
const RoomOpera_RoomOperaType RoomOpera::RoomOperaType_MIN;
const RoomOpera_RoomOperaType RoomOpera::RoomOperaType_MAX;
const int RoomOpera::RoomOperaType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoomOpera::kMessIdFieldNumber;
const int RoomOpera::kTypeFieldNumber;
#endif  // !_MSC_VER

RoomOpera::RoomOpera()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youdrawmeguess.RoomOpera)
}

void RoomOpera::InitAsDefaultInstance() {
}

RoomOpera::RoomOpera(const RoomOpera& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youdrawmeguess.RoomOpera)
}

void RoomOpera::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomOpera::~RoomOpera() {
  // @@protoc_insertion_point(destructor:youdrawmeguess.RoomOpera)
  SharedDtor();
}

void RoomOpera::SharedDtor() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomOpera::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomOpera::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomOpera_descriptor_;
}

const RoomOpera& RoomOpera::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_youdrawmeguess_2eproto();
  return *default_instance_;
}

RoomOpera* RoomOpera::default_instance_ = NULL;

RoomOpera* RoomOpera::New() const {
  return new RoomOpera;
}

void RoomOpera::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_mess_id()) {
      if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mess_id_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomOpera::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youdrawmeguess.RoomOpera)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mess_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mess_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mess_id().data(), this->mess_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mess_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .youdrawmeguess.RoomOpera.RoomOperaType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::youdrawmeguess::RoomOpera_RoomOperaType_IsValid(value)) {
            set_type(static_cast< ::youdrawmeguess::RoomOpera_RoomOperaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youdrawmeguess.RoomOpera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youdrawmeguess.RoomOpera)
  return false;
#undef DO_
}

void RoomOpera::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youdrawmeguess.RoomOpera)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mess_id(), output);
  }

  // optional .youdrawmeguess.RoomOpera.RoomOperaType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youdrawmeguess.RoomOpera)
}

::google::protobuf::uint8* RoomOpera::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:youdrawmeguess.RoomOpera)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mess_id(), target);
  }

  // optional .youdrawmeguess.RoomOpera.RoomOperaType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youdrawmeguess.RoomOpera)
  return target;
}

int RoomOpera::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mess_id = 1;
    if (has_mess_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mess_id());
    }

    // optional .youdrawmeguess.RoomOpera.RoomOperaType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomOpera::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomOpera* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomOpera*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomOpera::MergeFrom(const RoomOpera& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mess_id()) {
      set_mess_id(from.mess_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomOpera::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomOpera::CopyFrom(const RoomOpera& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomOpera::IsInitialized() const {

  return true;
}

void RoomOpera::Swap(RoomOpera* other) {
  if (other != this) {
    std::swap(mess_id_, other->mess_id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomOpera::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomOpera_descriptor_;
  metadata.reflection = RoomOpera_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomCallback::kMessIdFieldNumber;
const int RoomCallback::kRoomIdFieldNumber;
const int RoomCallback::kPlayersmessFieldNumber;
#endif  // !_MSC_VER

RoomCallback::RoomCallback()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youdrawmeguess.RoomCallback)
}

void RoomCallback::InitAsDefaultInstance() {
}

RoomCallback::RoomCallback(const RoomCallback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youdrawmeguess.RoomCallback)
}

void RoomCallback::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_ = 0;
  playersmess_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomCallback::~RoomCallback() {
  // @@protoc_insertion_point(destructor:youdrawmeguess.RoomCallback)
  SharedDtor();
}

void RoomCallback::SharedDtor() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (playersmess_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playersmess_;
  }
  if (this != default_instance_) {
  }
}

void RoomCallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCallback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCallback_descriptor_;
}

const RoomCallback& RoomCallback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_youdrawmeguess_2eproto();
  return *default_instance_;
}

RoomCallback* RoomCallback::default_instance_ = NULL;

RoomCallback* RoomCallback::New() const {
  return new RoomCallback;
}

void RoomCallback::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_mess_id()) {
      if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mess_id_->clear();
      }
    }
    roomid_ = 0;
    if (has_playersmess()) {
      if (playersmess_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playersmess_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomCallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youdrawmeguess.RoomCallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mess_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mess_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mess_id().data(), this->mess_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mess_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional int32 roomId = 2;
      case 2: {
        if (tag == 16) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_playersmess;
        break;
      }

      // optional string playersmess = 3;
      case 3: {
        if (tag == 26) {
         parse_playersmess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersmess()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playersmess().data(), this->playersmess().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playersmess");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youdrawmeguess.RoomCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youdrawmeguess.RoomCallback)
  return false;
#undef DO_
}

void RoomCallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youdrawmeguess.RoomCallback)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mess_id(), output);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional string playersmess = 3;
  if (has_playersmess()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersmess().data(), this->playersmess().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playersmess");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playersmess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youdrawmeguess.RoomCallback)
}

::google::protobuf::uint8* RoomCallback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:youdrawmeguess.RoomCallback)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mess_id(), target);
  }

  // optional int32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional string playersmess = 3;
  if (has_playersmess()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playersmess().data(), this->playersmess().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playersmess");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playersmess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youdrawmeguess.RoomCallback)
  return target;
}

int RoomCallback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mess_id = 1;
    if (has_mess_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mess_id());
    }

    // optional int32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string playersmess = 3;
    if (has_playersmess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playersmess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCallback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomCallback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomCallback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomCallback::MergeFrom(const RoomCallback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mess_id()) {
      set_mess_id(from.mess_id());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playersmess()) {
      set_playersmess(from.playersmess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomCallback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCallback::CopyFrom(const RoomCallback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCallback::IsInitialized() const {

  return true;
}

void RoomCallback::Swap(RoomCallback* other) {
  if (other != this) {
    std::swap(mess_id_, other->mess_id_);
    std::swap(roomid_, other->roomid_);
    std::swap(playersmess_, other->playersmess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomCallback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomCallback_descriptor_;
  metadata.reflection = RoomCallback_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoomMessage_RoomMessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMessage_RoomMessType_descriptor_;
}
bool RoomMessage_RoomMessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoomMessage_RoomMessType RoomMessage::PJOIN;
const RoomMessage_RoomMessType RoomMessage::PQUIT;
const RoomMessage_RoomMessType RoomMessage::POK;
const RoomMessage_RoomMessType RoomMessage::PSTART;
const RoomMessage_RoomMessType RoomMessage::PMESS;
const RoomMessage_RoomMessType RoomMessage::PTIME;
const RoomMessage_RoomMessType RoomMessage::RoomMessType_MIN;
const RoomMessage_RoomMessType RoomMessage::RoomMessType_MAX;
const int RoomMessage::RoomMessType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoomMessage::kMessIdFieldNumber;
const int RoomMessage::kTypeFieldNumber;
const int RoomMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

RoomMessage::RoomMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youdrawmeguess.RoomMessage)
}

void RoomMessage::InitAsDefaultInstance() {
}

RoomMessage::RoomMessage(const RoomMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youdrawmeguess.RoomMessage)
}

void RoomMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMessage::~RoomMessage() {
  // @@protoc_insertion_point(destructor:youdrawmeguess.RoomMessage)
  SharedDtor();
}

void RoomMessage::SharedDtor() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void RoomMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMessage_descriptor_;
}

const RoomMessage& RoomMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_youdrawmeguess_2eproto();
  return *default_instance_;
}

RoomMessage* RoomMessage::default_instance_ = NULL;

RoomMessage* RoomMessage::New() const {
  return new RoomMessage;
}

void RoomMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_mess_id()) {
      if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mess_id_->clear();
      }
    }
    type_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youdrawmeguess.RoomMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mess_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mess_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mess_id().data(), this->mess_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mess_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .youdrawmeguess.RoomMessage.RoomMessType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::youdrawmeguess::RoomMessage_RoomMessType_IsValid(value)) {
            set_type(static_cast< ::youdrawmeguess::RoomMessage_RoomMessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // optional string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youdrawmeguess.RoomMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youdrawmeguess.RoomMessage)
  return false;
#undef DO_
}

void RoomMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youdrawmeguess.RoomMessage)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mess_id(), output);
  }

  // optional .youdrawmeguess.RoomMessage.RoomMessType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youdrawmeguess.RoomMessage)
}

::google::protobuf::uint8* RoomMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:youdrawmeguess.RoomMessage)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mess_id(), target);
  }

  // optional .youdrawmeguess.RoomMessage.RoomMessType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youdrawmeguess.RoomMessage)
  return target;
}

int RoomMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mess_id = 1;
    if (has_mess_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mess_id());
    }

    // optional .youdrawmeguess.RoomMessage.RoomMessType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMessage::MergeFrom(const RoomMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mess_id()) {
      set_mess_id(from.mess_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMessage::CopyFrom(const RoomMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMessage::IsInitialized() const {

  return true;
}

void RoomMessage::Swap(RoomMessage* other) {
  if (other != this) {
    std::swap(mess_id_, other->mess_id_);
    std::swap(type_, other->type_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMessage_descriptor_;
  metadata.reflection = RoomMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ack::kMessIdFieldNumber;
#endif  // !_MSC_VER

Ack::Ack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:youdrawmeguess.Ack)
}

void Ack::InitAsDefaultInstance() {
}

Ack::Ack(const Ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:youdrawmeguess.Ack)
}

void Ack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:youdrawmeguess.Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (this != default_instance_) {
  }
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ack_descriptor_;
}

const Ack& Ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_youdrawmeguess_2eproto();
  return *default_instance_;
}

Ack* Ack::default_instance_ = NULL;

Ack* Ack::New() const {
  return new Ack;
}

void Ack::Clear() {
  if (has_mess_id()) {
    if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mess_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:youdrawmeguess.Ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mess_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mess_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mess_id().data(), this->mess_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mess_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:youdrawmeguess.Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:youdrawmeguess.Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:youdrawmeguess.Ack)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mess_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:youdrawmeguess.Ack)
}

::google::protobuf::uint8* Ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:youdrawmeguess.Ack)
  // optional string mess_id = 1;
  if (has_mess_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mess_id().data(), this->mess_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mess_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mess_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:youdrawmeguess.Ack)
  return target;
}

int Ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mess_id = 1;
    if (has_mess_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mess_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mess_id()) {
      set_mess_id(from.mess_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {

  return true;
}

void Ack::Swap(Ack* other) {
  if (other != this) {
    std::swap(mess_id_, other->mess_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ack_descriptor_;
  metadata.reflection = Ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace youdrawmeguess

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: youdrawmeguess.proto

#ifndef PROTOBUF_youdrawmeguess_2eproto__INCLUDED
#define PROTOBUF_youdrawmeguess_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace youdrawmeguess {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_youdrawmeguess_2eproto();
void protobuf_AssignDesc_youdrawmeguess_2eproto();
void protobuf_ShutdownFile_youdrawmeguess_2eproto();

class Connect;
class RoomOpera;
class RoomCallback;
class RoomMessage;
class Ack;

enum RoomOpera_RoomOperaType {
  RoomOpera_RoomOperaType_JOIN = 0,
  RoomOpera_RoomOperaType_QUIT = 1,
  RoomOpera_RoomOperaType_OK = 2
};
bool RoomOpera_RoomOperaType_IsValid(int value);
const RoomOpera_RoomOperaType RoomOpera_RoomOperaType_RoomOperaType_MIN = RoomOpera_RoomOperaType_JOIN;
const RoomOpera_RoomOperaType RoomOpera_RoomOperaType_RoomOperaType_MAX = RoomOpera_RoomOperaType_OK;
const int RoomOpera_RoomOperaType_RoomOperaType_ARRAYSIZE = RoomOpera_RoomOperaType_RoomOperaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoomOpera_RoomOperaType_descriptor();
inline const ::std::string& RoomOpera_RoomOperaType_Name(RoomOpera_RoomOperaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoomOpera_RoomOperaType_descriptor(), value);
}
inline bool RoomOpera_RoomOperaType_Parse(
    const ::std::string& name, RoomOpera_RoomOperaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomOpera_RoomOperaType>(
    RoomOpera_RoomOperaType_descriptor(), name, value);
}
enum RoomMessage_RoomMessType {
  RoomMessage_RoomMessType_PJOIN = 0,
  RoomMessage_RoomMessType_PQUIT = 1,
  RoomMessage_RoomMessType_POK = 2,
  RoomMessage_RoomMessType_PSTART = 3,
  RoomMessage_RoomMessType_PMESS = 4,
  RoomMessage_RoomMessType_PTIME = 5
};
bool RoomMessage_RoomMessType_IsValid(int value);
const RoomMessage_RoomMessType RoomMessage_RoomMessType_RoomMessType_MIN = RoomMessage_RoomMessType_PJOIN;
const RoomMessage_RoomMessType RoomMessage_RoomMessType_RoomMessType_MAX = RoomMessage_RoomMessType_PTIME;
const int RoomMessage_RoomMessType_RoomMessType_ARRAYSIZE = RoomMessage_RoomMessType_RoomMessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoomMessage_RoomMessType_descriptor();
inline const ::std::string& RoomMessage_RoomMessType_Name(RoomMessage_RoomMessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoomMessage_RoomMessType_descriptor(), value);
}
inline bool RoomMessage_RoomMessType_Parse(
    const ::std::string& name, RoomMessage_RoomMessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomMessage_RoomMessType>(
    RoomMessage_RoomMessType_descriptor(), name, value);
}
// ===================================================================

class Connect : public ::google::protobuf::Message {
 public:
  Connect();
  virtual ~Connect();

  Connect(const Connect& from);

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();

  void Swap(Connect* other);

  // implements Message ----------------------------------------------

  Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string session = 2;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 2;
  inline const ::std::string& session() const;
  inline void set_session(const ::std::string& value);
  inline void set_session(const char* value);
  inline void set_session(const char* value, size_t size);
  inline ::std::string* mutable_session();
  inline ::std::string* release_session();
  inline void set_allocated_session(::std::string* session);

  // optional string mess_id = 3;
  inline bool has_mess_id() const;
  inline void clear_mess_id();
  static const int kMessIdFieldNumber = 3;
  inline const ::std::string& mess_id() const;
  inline void set_mess_id(const ::std::string& value);
  inline void set_mess_id(const char* value);
  inline void set_mess_id(const char* value, size_t size);
  inline ::std::string* mutable_mess_id();
  inline ::std::string* release_mess_id();
  inline void set_allocated_mess_id(::std::string* mess_id);

  // @@protoc_insertion_point(class_scope:youdrawmeguess.Connect)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_mess_id();
  inline void clear_has_mess_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::std::string* session_;
  ::std::string* mess_id_;
  friend void  protobuf_AddDesc_youdrawmeguess_2eproto();
  friend void protobuf_AssignDesc_youdrawmeguess_2eproto();
  friend void protobuf_ShutdownFile_youdrawmeguess_2eproto();

  void InitAsDefaultInstance();
  static Connect* default_instance_;
};
// -------------------------------------------------------------------

class RoomOpera : public ::google::protobuf::Message {
 public:
  RoomOpera();
  virtual ~RoomOpera();

  RoomOpera(const RoomOpera& from);

  inline RoomOpera& operator=(const RoomOpera& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomOpera& default_instance();

  void Swap(RoomOpera* other);

  // implements Message ----------------------------------------------

  RoomOpera* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomOpera& from);
  void MergeFrom(const RoomOpera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoomOpera_RoomOperaType RoomOperaType;
  static const RoomOperaType JOIN = RoomOpera_RoomOperaType_JOIN;
  static const RoomOperaType QUIT = RoomOpera_RoomOperaType_QUIT;
  static const RoomOperaType OK = RoomOpera_RoomOperaType_OK;
  static inline bool RoomOperaType_IsValid(int value) {
    return RoomOpera_RoomOperaType_IsValid(value);
  }
  static const RoomOperaType RoomOperaType_MIN =
    RoomOpera_RoomOperaType_RoomOperaType_MIN;
  static const RoomOperaType RoomOperaType_MAX =
    RoomOpera_RoomOperaType_RoomOperaType_MAX;
  static const int RoomOperaType_ARRAYSIZE =
    RoomOpera_RoomOperaType_RoomOperaType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoomOperaType_descriptor() {
    return RoomOpera_RoomOperaType_descriptor();
  }
  static inline const ::std::string& RoomOperaType_Name(RoomOperaType value) {
    return RoomOpera_RoomOperaType_Name(value);
  }
  static inline bool RoomOperaType_Parse(const ::std::string& name,
      RoomOperaType* value) {
    return RoomOpera_RoomOperaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string mess_id = 1;
  inline bool has_mess_id() const;
  inline void clear_mess_id();
  static const int kMessIdFieldNumber = 1;
  inline const ::std::string& mess_id() const;
  inline void set_mess_id(const ::std::string& value);
  inline void set_mess_id(const char* value);
  inline void set_mess_id(const char* value, size_t size);
  inline ::std::string* mutable_mess_id();
  inline ::std::string* release_mess_id();
  inline void set_allocated_mess_id(::std::string* mess_id);

  // optional .youdrawmeguess.RoomOpera.RoomOperaType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::youdrawmeguess::RoomOpera_RoomOperaType type() const;
  inline void set_type(::youdrawmeguess::RoomOpera_RoomOperaType value);

  // @@protoc_insertion_point(class_scope:youdrawmeguess.RoomOpera)
 private:
  inline void set_has_mess_id();
  inline void clear_has_mess_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mess_id_;
  int type_;
  friend void  protobuf_AddDesc_youdrawmeguess_2eproto();
  friend void protobuf_AssignDesc_youdrawmeguess_2eproto();
  friend void protobuf_ShutdownFile_youdrawmeguess_2eproto();

  void InitAsDefaultInstance();
  static RoomOpera* default_instance_;
};
// -------------------------------------------------------------------

class RoomCallback : public ::google::protobuf::Message {
 public:
  RoomCallback();
  virtual ~RoomCallback();

  RoomCallback(const RoomCallback& from);

  inline RoomCallback& operator=(const RoomCallback& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomCallback& default_instance();

  void Swap(RoomCallback* other);

  // implements Message ----------------------------------------------

  RoomCallback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomCallback& from);
  void MergeFrom(const RoomCallback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mess_id = 1;
  inline bool has_mess_id() const;
  inline void clear_mess_id();
  static const int kMessIdFieldNumber = 1;
  inline const ::std::string& mess_id() const;
  inline void set_mess_id(const ::std::string& value);
  inline void set_mess_id(const char* value);
  inline void set_mess_id(const char* value, size_t size);
  inline ::std::string* mutable_mess_id();
  inline ::std::string* release_mess_id();
  inline void set_allocated_mess_id(::std::string* mess_id);

  // optional int32 roomId = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional string playersmess = 3;
  inline bool has_playersmess() const;
  inline void clear_playersmess();
  static const int kPlayersmessFieldNumber = 3;
  inline const ::std::string& playersmess() const;
  inline void set_playersmess(const ::std::string& value);
  inline void set_playersmess(const char* value);
  inline void set_playersmess(const char* value, size_t size);
  inline ::std::string* mutable_playersmess();
  inline ::std::string* release_playersmess();
  inline void set_allocated_playersmess(::std::string* playersmess);

  // @@protoc_insertion_point(class_scope:youdrawmeguess.RoomCallback)
 private:
  inline void set_has_mess_id();
  inline void clear_has_mess_id();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playersmess();
  inline void clear_has_playersmess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mess_id_;
  ::std::string* playersmess_;
  ::google::protobuf::int32 roomid_;
  friend void  protobuf_AddDesc_youdrawmeguess_2eproto();
  friend void protobuf_AssignDesc_youdrawmeguess_2eproto();
  friend void protobuf_ShutdownFile_youdrawmeguess_2eproto();

  void InitAsDefaultInstance();
  static RoomCallback* default_instance_;
};
// -------------------------------------------------------------------

class RoomMessage : public ::google::protobuf::Message {
 public:
  RoomMessage();
  virtual ~RoomMessage();

  RoomMessage(const RoomMessage& from);

  inline RoomMessage& operator=(const RoomMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomMessage& default_instance();

  void Swap(RoomMessage* other);

  // implements Message ----------------------------------------------

  RoomMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomMessage& from);
  void MergeFrom(const RoomMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RoomMessage_RoomMessType RoomMessType;
  static const RoomMessType PJOIN = RoomMessage_RoomMessType_PJOIN;
  static const RoomMessType PQUIT = RoomMessage_RoomMessType_PQUIT;
  static const RoomMessType POK = RoomMessage_RoomMessType_POK;
  static const RoomMessType PSTART = RoomMessage_RoomMessType_PSTART;
  static const RoomMessType PMESS = RoomMessage_RoomMessType_PMESS;
  static const RoomMessType PTIME = RoomMessage_RoomMessType_PTIME;
  static inline bool RoomMessType_IsValid(int value) {
    return RoomMessage_RoomMessType_IsValid(value);
  }
  static const RoomMessType RoomMessType_MIN =
    RoomMessage_RoomMessType_RoomMessType_MIN;
  static const RoomMessType RoomMessType_MAX =
    RoomMessage_RoomMessType_RoomMessType_MAX;
  static const int RoomMessType_ARRAYSIZE =
    RoomMessage_RoomMessType_RoomMessType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoomMessType_descriptor() {
    return RoomMessage_RoomMessType_descriptor();
  }
  static inline const ::std::string& RoomMessType_Name(RoomMessType value) {
    return RoomMessage_RoomMessType_Name(value);
  }
  static inline bool RoomMessType_Parse(const ::std::string& name,
      RoomMessType* value) {
    return RoomMessage_RoomMessType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string mess_id = 1;
  inline bool has_mess_id() const;
  inline void clear_mess_id();
  static const int kMessIdFieldNumber = 1;
  inline const ::std::string& mess_id() const;
  inline void set_mess_id(const ::std::string& value);
  inline void set_mess_id(const char* value);
  inline void set_mess_id(const char* value, size_t size);
  inline ::std::string* mutable_mess_id();
  inline ::std::string* release_mess_id();
  inline void set_allocated_mess_id(::std::string* mess_id);

  // optional .youdrawmeguess.RoomMessage.RoomMessType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::youdrawmeguess::RoomMessage_RoomMessType type() const;
  inline void set_type(::youdrawmeguess::RoomMessage_RoomMessType value);

  // optional string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:youdrawmeguess.RoomMessage)
 private:
  inline void set_has_mess_id();
  inline void clear_has_mess_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mess_id_;
  ::std::string* message_;
  int type_;
  friend void  protobuf_AddDesc_youdrawmeguess_2eproto();
  friend void protobuf_AssignDesc_youdrawmeguess_2eproto();
  friend void protobuf_ShutdownFile_youdrawmeguess_2eproto();

  void InitAsDefaultInstance();
  static RoomMessage* default_instance_;
};
// -------------------------------------------------------------------

class Ack : public ::google::protobuf::Message {
 public:
  Ack();
  virtual ~Ack();

  Ack(const Ack& from);

  inline Ack& operator=(const Ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ack& default_instance();

  void Swap(Ack* other);

  // implements Message ----------------------------------------------

  Ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ack& from);
  void MergeFrom(const Ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mess_id = 1;
  inline bool has_mess_id() const;
  inline void clear_mess_id();
  static const int kMessIdFieldNumber = 1;
  inline const ::std::string& mess_id() const;
  inline void set_mess_id(const ::std::string& value);
  inline void set_mess_id(const char* value);
  inline void set_mess_id(const char* value, size_t size);
  inline ::std::string* mutable_mess_id();
  inline ::std::string* release_mess_id();
  inline void set_allocated_mess_id(::std::string* mess_id);

  // @@protoc_insertion_point(class_scope:youdrawmeguess.Ack)
 private:
  inline void set_has_mess_id();
  inline void clear_has_mess_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mess_id_;
  friend void  protobuf_AddDesc_youdrawmeguess_2eproto();
  friend void protobuf_AssignDesc_youdrawmeguess_2eproto();
  friend void protobuf_ShutdownFile_youdrawmeguess_2eproto();

  void InitAsDefaultInstance();
  static Ack* default_instance_;
};
// ===================================================================


// ===================================================================

// Connect

// optional int64 id = 1;
inline bool Connect::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connect::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connect::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connect::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Connect::id() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.Connect.id)
  return id_;
}
inline void Connect::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:youdrawmeguess.Connect.id)
}

// optional string session = 2;
inline bool Connect::has_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connect::set_has_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connect::clear_has_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Connect::clear_session() {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_->clear();
  }
  clear_has_session();
}
inline const ::std::string& Connect::session() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.Connect.session)
  return *session_;
}
inline void Connect::set_session(const ::std::string& value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.Connect.session)
}
inline void Connect::set_session(const char* value) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.Connect.session)
}
inline void Connect::set_session(const char* value, size_t size) {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.Connect.session)
}
inline ::std::string* Connect::mutable_session() {
  set_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.Connect.session)
  return session_;
}
inline ::std::string* Connect::release_session() {
  clear_has_session();
  if (session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_;
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Connect::set_allocated_session(::std::string* session) {
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (session) {
    set_has_session();
    session_ = session;
  } else {
    clear_has_session();
    session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.Connect.session)
}

// optional string mess_id = 3;
inline bool Connect::has_mess_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Connect::set_has_mess_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Connect::clear_has_mess_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Connect::clear_mess_id() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_->clear();
  }
  clear_has_mess_id();
}
inline const ::std::string& Connect::mess_id() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.Connect.mess_id)
  return *mess_id_;
}
inline void Connect::set_mess_id(const ::std::string& value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.Connect.mess_id)
}
inline void Connect::set_mess_id(const char* value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.Connect.mess_id)
}
inline void Connect::set_mess_id(const char* value, size_t size) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.Connect.mess_id)
}
inline ::std::string* Connect::mutable_mess_id() {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.Connect.mess_id)
  return mess_id_;
}
inline ::std::string* Connect::release_mess_id() {
  clear_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mess_id_;
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Connect::set_allocated_mess_id(::std::string* mess_id) {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (mess_id) {
    set_has_mess_id();
    mess_id_ = mess_id;
  } else {
    clear_has_mess_id();
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.Connect.mess_id)
}

// -------------------------------------------------------------------

// RoomOpera

// optional string mess_id = 1;
inline bool RoomOpera::has_mess_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomOpera::set_has_mess_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomOpera::clear_has_mess_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomOpera::clear_mess_id() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_->clear();
  }
  clear_has_mess_id();
}
inline const ::std::string& RoomOpera::mess_id() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomOpera.mess_id)
  return *mess_id_;
}
inline void RoomOpera::set_mess_id(const ::std::string& value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomOpera.mess_id)
}
inline void RoomOpera::set_mess_id(const char* value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.RoomOpera.mess_id)
}
inline void RoomOpera::set_mess_id(const char* value, size_t size) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.RoomOpera.mess_id)
}
inline ::std::string* RoomOpera::mutable_mess_id() {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.RoomOpera.mess_id)
  return mess_id_;
}
inline ::std::string* RoomOpera::release_mess_id() {
  clear_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mess_id_;
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomOpera::set_allocated_mess_id(::std::string* mess_id) {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (mess_id) {
    set_has_mess_id();
    mess_id_ = mess_id;
  } else {
    clear_has_mess_id();
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.RoomOpera.mess_id)
}

// optional .youdrawmeguess.RoomOpera.RoomOperaType type = 2;
inline bool RoomOpera::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomOpera::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomOpera::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomOpera::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::youdrawmeguess::RoomOpera_RoomOperaType RoomOpera::type() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomOpera.type)
  return static_cast< ::youdrawmeguess::RoomOpera_RoomOperaType >(type_);
}
inline void RoomOpera::set_type(::youdrawmeguess::RoomOpera_RoomOperaType value) {
  assert(::youdrawmeguess::RoomOpera_RoomOperaType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomOpera.type)
}

// -------------------------------------------------------------------

// RoomCallback

// optional string mess_id = 1;
inline bool RoomCallback::has_mess_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomCallback::set_has_mess_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomCallback::clear_has_mess_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomCallback::clear_mess_id() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_->clear();
  }
  clear_has_mess_id();
}
inline const ::std::string& RoomCallback::mess_id() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomCallback.mess_id)
  return *mess_id_;
}
inline void RoomCallback::set_mess_id(const ::std::string& value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomCallback.mess_id)
}
inline void RoomCallback::set_mess_id(const char* value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.RoomCallback.mess_id)
}
inline void RoomCallback::set_mess_id(const char* value, size_t size) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.RoomCallback.mess_id)
}
inline ::std::string* RoomCallback::mutable_mess_id() {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.RoomCallback.mess_id)
  return mess_id_;
}
inline ::std::string* RoomCallback::release_mess_id() {
  clear_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mess_id_;
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomCallback::set_allocated_mess_id(::std::string* mess_id) {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (mess_id) {
    set_has_mess_id();
    mess_id_ = mess_id;
  } else {
    clear_has_mess_id();
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.RoomCallback.mess_id)
}

// optional int32 roomId = 2;
inline bool RoomCallback::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomCallback::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomCallback::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomCallback::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 RoomCallback::roomid() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomCallback.roomId)
  return roomid_;
}
inline void RoomCallback::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomCallback.roomId)
}

// optional string playersmess = 3;
inline bool RoomCallback::has_playersmess() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomCallback::set_has_playersmess() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomCallback::clear_has_playersmess() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomCallback::clear_playersmess() {
  if (playersmess_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playersmess_->clear();
  }
  clear_has_playersmess();
}
inline const ::std::string& RoomCallback::playersmess() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomCallback.playersmess)
  return *playersmess_;
}
inline void RoomCallback::set_playersmess(const ::std::string& value) {
  set_has_playersmess();
  if (playersmess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playersmess_ = new ::std::string;
  }
  playersmess_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomCallback.playersmess)
}
inline void RoomCallback::set_playersmess(const char* value) {
  set_has_playersmess();
  if (playersmess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playersmess_ = new ::std::string;
  }
  playersmess_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.RoomCallback.playersmess)
}
inline void RoomCallback::set_playersmess(const char* value, size_t size) {
  set_has_playersmess();
  if (playersmess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playersmess_ = new ::std::string;
  }
  playersmess_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.RoomCallback.playersmess)
}
inline ::std::string* RoomCallback::mutable_playersmess() {
  set_has_playersmess();
  if (playersmess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playersmess_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.RoomCallback.playersmess)
  return playersmess_;
}
inline ::std::string* RoomCallback::release_playersmess() {
  clear_has_playersmess();
  if (playersmess_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playersmess_;
    playersmess_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomCallback::set_allocated_playersmess(::std::string* playersmess) {
  if (playersmess_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playersmess_;
  }
  if (playersmess) {
    set_has_playersmess();
    playersmess_ = playersmess;
  } else {
    clear_has_playersmess();
    playersmess_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.RoomCallback.playersmess)
}

// -------------------------------------------------------------------

// RoomMessage

// optional string mess_id = 1;
inline bool RoomMessage::has_mess_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomMessage::set_has_mess_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomMessage::clear_has_mess_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomMessage::clear_mess_id() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_->clear();
  }
  clear_has_mess_id();
}
inline const ::std::string& RoomMessage::mess_id() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomMessage.mess_id)
  return *mess_id_;
}
inline void RoomMessage::set_mess_id(const ::std::string& value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomMessage.mess_id)
}
inline void RoomMessage::set_mess_id(const char* value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.RoomMessage.mess_id)
}
inline void RoomMessage::set_mess_id(const char* value, size_t size) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.RoomMessage.mess_id)
}
inline ::std::string* RoomMessage::mutable_mess_id() {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.RoomMessage.mess_id)
  return mess_id_;
}
inline ::std::string* RoomMessage::release_mess_id() {
  clear_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mess_id_;
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomMessage::set_allocated_mess_id(::std::string* mess_id) {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (mess_id) {
    set_has_mess_id();
    mess_id_ = mess_id;
  } else {
    clear_has_mess_id();
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.RoomMessage.mess_id)
}

// optional .youdrawmeguess.RoomMessage.RoomMessType type = 2;
inline bool RoomMessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomMessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::youdrawmeguess::RoomMessage_RoomMessType RoomMessage::type() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomMessage.type)
  return static_cast< ::youdrawmeguess::RoomMessage_RoomMessType >(type_);
}
inline void RoomMessage::set_type(::youdrawmeguess::RoomMessage_RoomMessType value) {
  assert(::youdrawmeguess::RoomMessage_RoomMessType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomMessage.type)
}

// optional string message = 3;
inline bool RoomMessage::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomMessage::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& RoomMessage::message() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.RoomMessage.message)
  return *message_;
}
inline void RoomMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.RoomMessage.message)
}
inline void RoomMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.RoomMessage.message)
}
inline void RoomMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.RoomMessage.message)
}
inline ::std::string* RoomMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.RoomMessage.message)
  return message_;
}
inline ::std::string* RoomMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.RoomMessage.message)
}

// -------------------------------------------------------------------

// Ack

// optional string mess_id = 1;
inline bool Ack::has_mess_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ack::set_has_mess_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ack::clear_has_mess_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ack::clear_mess_id() {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_->clear();
  }
  clear_has_mess_id();
}
inline const ::std::string& Ack::mess_id() const {
  // @@protoc_insertion_point(field_get:youdrawmeguess.Ack.mess_id)
  return *mess_id_;
}
inline void Ack::set_mess_id(const ::std::string& value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set:youdrawmeguess.Ack.mess_id)
}
inline void Ack::set_mess_id(const char* value) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:youdrawmeguess.Ack.mess_id)
}
inline void Ack::set_mess_id(const char* value, size_t size) {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  mess_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:youdrawmeguess.Ack.mess_id)
}
inline ::std::string* Ack::mutable_mess_id() {
  set_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mess_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:youdrawmeguess.Ack.mess_id)
  return mess_id_;
}
inline ::std::string* Ack::release_mess_id() {
  clear_has_mess_id();
  if (mess_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mess_id_;
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ack::set_allocated_mess_id(::std::string* mess_id) {
  if (mess_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mess_id_;
  }
  if (mess_id) {
    set_has_mess_id();
    mess_id_ = mess_id;
  } else {
    clear_has_mess_id();
    mess_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:youdrawmeguess.Ack.mess_id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace youdrawmeguess

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::youdrawmeguess::RoomOpera_RoomOperaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::youdrawmeguess::RoomOpera_RoomOperaType>() {
  return ::youdrawmeguess::RoomOpera_RoomOperaType_descriptor();
}
template <> struct is_proto_enum< ::youdrawmeguess::RoomMessage_RoomMessType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::youdrawmeguess::RoomMessage_RoomMessType>() {
  return ::youdrawmeguess::RoomMessage_RoomMessType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_youdrawmeguess_2eproto__INCLUDED

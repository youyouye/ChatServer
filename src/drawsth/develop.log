你画我猜:
1.登陆,账号体系.
2.进入房间,房间体系,是否有房间,人数,没有就建立房间.
3.服务端检测房间人数,>3就开始进行倒计时,向它们发送时间.内部保持一个时间记录.
人数变化,取消发送定时器.
4.退出房间.
5.游戏开始,发送消息,客户端进入游戏界面.
6.关键的断线机制.
7.游戏中,
选词,服务端选出词,对应玩家,发送过去.玩家选择好.开始计时间,发送画的信息.实时发送画面过去;
时间到,发送结果过去.开始下一个玩家,..
过程中的回答,聊天.得分.服务端实际上处于一个逻辑体系中,保存状态.状态转换..
8.感觉还好把.还是挺有挑战性的..

当我们需要的时候,迭代;一步步实现.
首先就是房间.
————————————————————————————————————
1.怎么优雅的实现一个ack回调.每一个消息都需要一个回调.并且消息认证.
消息池,ack池. 时间回调呢?
发送message->绑定一组函数{绑定定时器,重发函数,删除,过期回调.}
			   重试次数,定时器.Id(房间相关的ID)
<定时器,message>
<ID,message>

收到message->函数{处理函数,ack函数}

这样的话,我们可以..
———————————————————————————————————
1.不知道从何下手的时候,先做最简单的:
消息.struct{里面是函数指针}
然后不同消息struct指向不同的实现.
然后写实现的时候就可以分开了.
2.MessPool:mess集合好了.
——————————————————————————————————

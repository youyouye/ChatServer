// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class Connect;
class ChatMessage;
class heart;
class ChatAck;
class OffMsgAsk;
class OffMsgRly;
class FriendAsk;
class FriendRly;
class FriendAck;

enum ChatMessage_MsgType {
  ChatMessage_MsgType_TEXT = 0,
  ChatMessage_MsgType_VOICE = 1,
  ChatMessage_MsgType_PHOTO = 2
};
bool ChatMessage_MsgType_IsValid(int value);
const ChatMessage_MsgType ChatMessage_MsgType_MsgType_MIN = ChatMessage_MsgType_TEXT;
const ChatMessage_MsgType ChatMessage_MsgType_MsgType_MAX = ChatMessage_MsgType_PHOTO;
const int ChatMessage_MsgType_MsgType_ARRAYSIZE = ChatMessage_MsgType_MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatMessage_MsgType_descriptor();
inline const ::std::string& ChatMessage_MsgType_Name(ChatMessage_MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatMessage_MsgType_descriptor(), value);
}
inline bool ChatMessage_MsgType_Parse(
    const ::std::string& name, ChatMessage_MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatMessage_MsgType>(
    ChatMessage_MsgType_descriptor(), name, value);
}
// ===================================================================

class Connect : public ::google::protobuf::Message {
 public:
  Connect();
  virtual ~Connect();

  Connect(const Connect& from);

  inline Connect& operator=(const Connect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connect& default_instance();

  void Swap(Connect* other);

  // implements Message ----------------------------------------------

  Connect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Connect& from);
  void MergeFrom(const Connect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.Connect)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Connect* default_instance_;
};
// -------------------------------------------------------------------

class ChatMessage : public ::google::protobuf::Message {
 public:
  ChatMessage();
  virtual ~ChatMessage();

  ChatMessage(const ChatMessage& from);

  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessage& default_instance();

  void Swap(ChatMessage* other);

  // implements Message ----------------------------------------------

  ChatMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatMessage& from);
  void MergeFrom(const ChatMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatMessage_MsgType MsgType;
  static const MsgType TEXT = ChatMessage_MsgType_TEXT;
  static const MsgType VOICE = ChatMessage_MsgType_VOICE;
  static const MsgType PHOTO = ChatMessage_MsgType_PHOTO;
  static inline bool MsgType_IsValid(int value) {
    return ChatMessage_MsgType_IsValid(value);
  }
  static const MsgType MsgType_MIN =
    ChatMessage_MsgType_MsgType_MIN;
  static const MsgType MsgType_MAX =
    ChatMessage_MsgType_MsgType_MAX;
  static const int MsgType_ARRAYSIZE =
    ChatMessage_MsgType_MsgType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MsgType_descriptor() {
    return ChatMessage_MsgType_descriptor();
  }
  static inline const ::std::string& MsgType_Name(MsgType value) {
    return ChatMessage_MsgType_Name(value);
  }
  static inline bool MsgType_Parse(const ::std::string& name,
      MsgType* value) {
    return ChatMessage_MsgType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 fromid = 1;
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromidFieldNumber = 1;
  inline ::google::protobuf::int32 fromid() const;
  inline void set_fromid(::google::protobuf::int32 value);

  // required int32 toid = 2;
  inline bool has_toid() const;
  inline void clear_toid();
  static const int kToidFieldNumber = 2;
  inline ::google::protobuf::int32 toid() const;
  inline void set_toid(::google::protobuf::int32 value);

  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // required int32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .chat.ChatMessage.MsgType type = 6 [default = TEXT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::chat::ChatMessage_MsgType type() const;
  inline void set_type(::chat::ChatMessage_MsgType value);

  // @@protoc_insertion_point(class_scope:chat.ChatMessage)
 private:
  inline void set_has_fromid();
  inline void clear_has_fromid();
  inline void set_has_toid();
  inline void clear_has_toid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fromid_;
  ::google::protobuf::int32 toid_;
  ::std::string* message_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 id_;
  int type_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatMessage* default_instance_;
};
// -------------------------------------------------------------------

class heart : public ::google::protobuf::Message {
 public:
  heart();
  virtual ~heart();

  heart(const heart& from);

  inline heart& operator=(const heart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const heart& default_instance();

  void Swap(heart* other);

  // implements Message ----------------------------------------------

  heart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const heart& from);
  void MergeFrom(const heart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.heart)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static heart* default_instance_;
};
// -------------------------------------------------------------------

class ChatAck : public ::google::protobuf::Message {
 public:
  ChatAck();
  virtual ~ChatAck();

  ChatAck(const ChatAck& from);

  inline ChatAck& operator=(const ChatAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatAck& default_instance();

  void Swap(ChatAck* other);

  // implements Message ----------------------------------------------

  ChatAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatAck& from);
  void MergeFrom(const ChatAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fromid = 1;
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromidFieldNumber = 1;
  inline ::google::protobuf::int32 fromid() const;
  inline void set_fromid(::google::protobuf::int32 value);

  // required int32 toid = 2;
  inline bool has_toid() const;
  inline void clear_toid();
  static const int kToidFieldNumber = 2;
  inline ::google::protobuf::int32 toid() const;
  inline void set_toid(::google::protobuf::int32 value);

  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.ChatAck)
 private:
  inline void set_has_fromid();
  inline void clear_has_fromid();
  inline void set_has_toid();
  inline void clear_has_toid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fromid_;
  ::google::protobuf::int32 toid_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static ChatAck* default_instance_;
};
// -------------------------------------------------------------------

class OffMsgAsk : public ::google::protobuf::Message {
 public:
  OffMsgAsk();
  virtual ~OffMsgAsk();

  OffMsgAsk(const OffMsgAsk& from);

  inline OffMsgAsk& operator=(const OffMsgAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffMsgAsk& default_instance();

  void Swap(OffMsgAsk* other);

  // implements Message ----------------------------------------------

  OffMsgAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffMsgAsk& from);
  void MergeFrom(const OffMsgAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 page = 1;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 1;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // required int32 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.OffMsgAsk)
 private:
  inline void set_has_page();
  inline void clear_has_page();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 page_;
  ::google::protobuf::int32 uid_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static OffMsgAsk* default_instance_;
};
// -------------------------------------------------------------------

class OffMsgRly : public ::google::protobuf::Message {
 public:
  OffMsgRly();
  virtual ~OffMsgRly();

  OffMsgRly(const OffMsgRly& from);

  inline OffMsgRly& operator=(const OffMsgRly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffMsgRly& default_instance();

  void Swap(OffMsgRly* other);

  // implements Message ----------------------------------------------

  OffMsgRly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffMsgRly& from);
  void MergeFrom(const OffMsgRly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 page = 1;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 1;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // repeated .chat.ChatMessage messages = 2;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 2;
  inline const ::chat::ChatMessage& messages(int index) const;
  inline ::chat::ChatMessage* mutable_messages(int index);
  inline ::chat::ChatMessage* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >*
      mutable_messages();

  // @@protoc_insertion_point(class_scope:chat.OffMsgRly)
 private:
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage > messages_;
  ::google::protobuf::int32 page_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static OffMsgRly* default_instance_;
};
// -------------------------------------------------------------------

class FriendAsk : public ::google::protobuf::Message {
 public:
  FriendAsk();
  virtual ~FriendAsk();

  FriendAsk(const FriendAsk& from);

  inline FriendAsk& operator=(const FriendAsk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendAsk& default_instance();

  void Swap(FriendAsk* other);

  // implements Message ----------------------------------------------

  FriendAsk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendAsk& from);
  void MergeFrom(const FriendAsk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 askid = 1;
  inline bool has_askid() const;
  inline void clear_askid();
  static const int kAskidFieldNumber = 1;
  inline ::google::protobuf::int32 askid() const;
  inline void set_askid(::google::protobuf::int32 value);

  // required int32 reqid = 2;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqidFieldNumber = 2;
  inline ::google::protobuf::int32 reqid() const;
  inline void set_reqid(::google::protobuf::int32 value);

  // required string askmessage = 3;
  inline bool has_askmessage() const;
  inline void clear_askmessage();
  static const int kAskmessageFieldNumber = 3;
  inline const ::std::string& askmessage() const;
  inline void set_askmessage(const ::std::string& value);
  inline void set_askmessage(const char* value);
  inline void set_askmessage(const char* value, size_t size);
  inline ::std::string* mutable_askmessage();
  inline ::std::string* release_askmessage();
  inline void set_allocated_askmessage(::std::string* askmessage);

  // @@protoc_insertion_point(class_scope:chat.FriendAsk)
 private:
  inline void set_has_askid();
  inline void clear_has_askid();
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_askmessage();
  inline void clear_has_askmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 askid_;
  ::google::protobuf::int32 reqid_;
  ::std::string* askmessage_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static FriendAsk* default_instance_;
};
// -------------------------------------------------------------------

class FriendRly : public ::google::protobuf::Message {
 public:
  FriendRly();
  virtual ~FriendRly();

  FriendRly(const FriendRly& from);

  inline FriendRly& operator=(const FriendRly& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendRly& default_instance();

  void Swap(FriendRly* other);

  // implements Message ----------------------------------------------

  FriendRly* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendRly& from);
  void MergeFrom(const FriendRly& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sendid = 1;
  inline bool has_sendid() const;
  inline void clear_sendid();
  static const int kSendidFieldNumber = 1;
  inline ::google::protobuf::int32 sendid() const;
  inline void set_sendid(::google::protobuf::int32 value);

  // required int32 recvid = 2;
  inline bool has_recvid() const;
  inline void clear_recvid();
  static const int kRecvidFieldNumber = 2;
  inline ::google::protobuf::int32 recvid() const;
  inline void set_recvid(::google::protobuf::int32 value);

  // required int32 reply = 3;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 3;
  inline ::google::protobuf::int32 reply() const;
  inline void set_reply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.FriendRly)
 private:
  inline void set_has_sendid();
  inline void clear_has_sendid();
  inline void set_has_recvid();
  inline void clear_has_recvid();
  inline void set_has_reply();
  inline void clear_has_reply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 sendid_;
  ::google::protobuf::int32 recvid_;
  ::google::protobuf::int32 reply_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static FriendRly* default_instance_;
};
// -------------------------------------------------------------------

class FriendAck : public ::google::protobuf::Message {
 public:
  FriendAck();
  virtual ~FriendAck();

  FriendAck(const FriendAck& from);

  inline FriendAck& operator=(const FriendAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendAck& default_instance();

  void Swap(FriendAck* other);

  // implements Message ----------------------------------------------

  FriendAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendAck& from);
  void MergeFrom(const FriendAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fromid = 1;
  inline bool has_fromid() const;
  inline void clear_fromid();
  static const int kFromidFieldNumber = 1;
  inline ::google::protobuf::int32 fromid() const;
  inline void set_fromid(::google::protobuf::int32 value);

  // required int32 toid = 2;
  inline bool has_toid() const;
  inline void clear_toid();
  static const int kToidFieldNumber = 2;
  inline ::google::protobuf::int32 toid() const;
  inline void set_toid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.FriendAck)
 private:
  inline void set_has_fromid();
  inline void clear_has_fromid();
  inline void set_has_toid();
  inline void clear_has_toid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 fromid_;
  ::google::protobuf::int32 toid_;
  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static FriendAck* default_instance_;
};
// ===================================================================


// ===================================================================

// Connect

// required int32 id = 1;
inline bool Connect::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connect::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connect::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Connect::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Connect::id() const {
  // @@protoc_insertion_point(field_get:chat.Connect.id)
  return id_;
}
inline void Connect::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.Connect.id)
}

// -------------------------------------------------------------------

// ChatMessage

// required int32 fromid = 1;
inline bool ChatMessage::has_fromid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatMessage::set_has_fromid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatMessage::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatMessage::clear_fromid() {
  fromid_ = 0;
  clear_has_fromid();
}
inline ::google::protobuf::int32 ChatMessage::fromid() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.fromid)
  return fromid_;
}
inline void ChatMessage::set_fromid(::google::protobuf::int32 value) {
  set_has_fromid();
  fromid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.fromid)
}

// required int32 toid = 2;
inline bool ChatMessage::has_toid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatMessage::set_has_toid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatMessage::clear_has_toid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatMessage::clear_toid() {
  toid_ = 0;
  clear_has_toid();
}
inline ::google::protobuf::int32 ChatMessage::toid() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.toid)
  return toid_;
}
inline void ChatMessage::set_toid(::google::protobuf::int32 value) {
  set_has_toid();
  toid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.toid)
}

// required int32 time = 3;
inline bool ChatMessage::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatMessage::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatMessage::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ChatMessage::time() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.time)
  return time_;
}
inline void ChatMessage::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.time)
}

// required string message = 4;
inline bool ChatMessage::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatMessage::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatMessage::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ChatMessage::message() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.message)
  return *message_;
}
inline void ChatMessage::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:chat.ChatMessage.message)
}
inline void ChatMessage::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ChatMessage.message)
}
inline void ChatMessage::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ChatMessage.message)
}
inline ::std::string* ChatMessage::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.ChatMessage.message)
  return message_;
}
inline ::std::string* ChatMessage::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatMessage::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.ChatMessage.message)
}

// required int32 id = 5;
inline bool ChatMessage::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatMessage::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChatMessage::id() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.id)
  return id_;
}
inline void ChatMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.id)
}

// optional .chat.ChatMessage.MsgType type = 6 [default = TEXT];
inline bool ChatMessage::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatMessage::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::chat::ChatMessage_MsgType ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:chat.ChatMessage.type)
  return static_cast< ::chat::ChatMessage_MsgType >(type_);
}
inline void ChatMessage::set_type(::chat::ChatMessage_MsgType value) {
  assert(::chat::ChatMessage_MsgType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatMessage.type)
}

// -------------------------------------------------------------------

// heart

// -------------------------------------------------------------------

// ChatAck

// required int32 fromid = 1;
inline bool ChatAck::has_fromid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatAck::set_has_fromid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatAck::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatAck::clear_fromid() {
  fromid_ = 0;
  clear_has_fromid();
}
inline ::google::protobuf::int32 ChatAck::fromid() const {
  // @@protoc_insertion_point(field_get:chat.ChatAck.fromid)
  return fromid_;
}
inline void ChatAck::set_fromid(::google::protobuf::int32 value) {
  set_has_fromid();
  fromid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatAck.fromid)
}

// required int32 toid = 2;
inline bool ChatAck::has_toid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatAck::set_has_toid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatAck::clear_has_toid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatAck::clear_toid() {
  toid_ = 0;
  clear_has_toid();
}
inline ::google::protobuf::int32 ChatAck::toid() const {
  // @@protoc_insertion_point(field_get:chat.ChatAck.toid)
  return toid_;
}
inline void ChatAck::set_toid(::google::protobuf::int32 value) {
  set_has_toid();
  toid_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatAck.toid)
}

// required int32 time = 3;
inline bool ChatAck::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatAck::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatAck::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatAck::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ChatAck::time() const {
  // @@protoc_insertion_point(field_get:chat.ChatAck.time)
  return time_;
}
inline void ChatAck::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatAck.time)
}

// required int32 id = 4;
inline bool ChatAck::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatAck::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatAck::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatAck::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ChatAck::id() const {
  // @@protoc_insertion_point(field_get:chat.ChatAck.id)
  return id_;
}
inline void ChatAck::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:chat.ChatAck.id)
}

// -------------------------------------------------------------------

// OffMsgAsk

// required int32 page = 1;
inline bool OffMsgAsk::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffMsgAsk::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffMsgAsk::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffMsgAsk::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 OffMsgAsk::page() const {
  // @@protoc_insertion_point(field_get:chat.OffMsgAsk.page)
  return page_;
}
inline void OffMsgAsk::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:chat.OffMsgAsk.page)
}

// required int32 uid = 2;
inline bool OffMsgAsk::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffMsgAsk::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffMsgAsk::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffMsgAsk::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 OffMsgAsk::uid() const {
  // @@protoc_insertion_point(field_get:chat.OffMsgAsk.uid)
  return uid_;
}
inline void OffMsgAsk::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:chat.OffMsgAsk.uid)
}

// -------------------------------------------------------------------

// OffMsgRly

// required int32 page = 1;
inline bool OffMsgRly::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffMsgRly::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffMsgRly::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffMsgRly::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 OffMsgRly::page() const {
  // @@protoc_insertion_point(field_get:chat.OffMsgRly.page)
  return page_;
}
inline void OffMsgRly::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:chat.OffMsgRly.page)
}

// repeated .chat.ChatMessage messages = 2;
inline int OffMsgRly::messages_size() const {
  return messages_.size();
}
inline void OffMsgRly::clear_messages() {
  messages_.Clear();
}
inline const ::chat::ChatMessage& OffMsgRly::messages(int index) const {
  // @@protoc_insertion_point(field_get:chat.OffMsgRly.messages)
  return messages_.Get(index);
}
inline ::chat::ChatMessage* OffMsgRly::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:chat.OffMsgRly.messages)
  return messages_.Mutable(index);
}
inline ::chat::ChatMessage* OffMsgRly::add_messages() {
  // @@protoc_insertion_point(field_add:chat.OffMsgRly.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >&
OffMsgRly::messages() const {
  // @@protoc_insertion_point(field_list:chat.OffMsgRly.messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::chat::ChatMessage >*
OffMsgRly::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:chat.OffMsgRly.messages)
  return &messages_;
}

// -------------------------------------------------------------------

// FriendAsk

// required int32 askid = 1;
inline bool FriendAsk::has_askid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendAsk::set_has_askid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendAsk::clear_has_askid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendAsk::clear_askid() {
  askid_ = 0;
  clear_has_askid();
}
inline ::google::protobuf::int32 FriendAsk::askid() const {
  // @@protoc_insertion_point(field_get:chat.FriendAsk.askid)
  return askid_;
}
inline void FriendAsk::set_askid(::google::protobuf::int32 value) {
  set_has_askid();
  askid_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendAsk.askid)
}

// required int32 reqid = 2;
inline bool FriendAsk::has_reqid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendAsk::set_has_reqid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendAsk::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendAsk::clear_reqid() {
  reqid_ = 0;
  clear_has_reqid();
}
inline ::google::protobuf::int32 FriendAsk::reqid() const {
  // @@protoc_insertion_point(field_get:chat.FriendAsk.reqid)
  return reqid_;
}
inline void FriendAsk::set_reqid(::google::protobuf::int32 value) {
  set_has_reqid();
  reqid_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendAsk.reqid)
}

// required string askmessage = 3;
inline bool FriendAsk::has_askmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendAsk::set_has_askmessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendAsk::clear_has_askmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendAsk::clear_askmessage() {
  if (askmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    askmessage_->clear();
  }
  clear_has_askmessage();
}
inline const ::std::string& FriendAsk::askmessage() const {
  // @@protoc_insertion_point(field_get:chat.FriendAsk.askmessage)
  return *askmessage_;
}
inline void FriendAsk::set_askmessage(const ::std::string& value) {
  set_has_askmessage();
  if (askmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    askmessage_ = new ::std::string;
  }
  askmessage_->assign(value);
  // @@protoc_insertion_point(field_set:chat.FriendAsk.askmessage)
}
inline void FriendAsk::set_askmessage(const char* value) {
  set_has_askmessage();
  if (askmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    askmessage_ = new ::std::string;
  }
  askmessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.FriendAsk.askmessage)
}
inline void FriendAsk::set_askmessage(const char* value, size_t size) {
  set_has_askmessage();
  if (askmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    askmessage_ = new ::std::string;
  }
  askmessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.FriendAsk.askmessage)
}
inline ::std::string* FriendAsk::mutable_askmessage() {
  set_has_askmessage();
  if (askmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    askmessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:chat.FriendAsk.askmessage)
  return askmessage_;
}
inline ::std::string* FriendAsk::release_askmessage() {
  clear_has_askmessage();
  if (askmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = askmessage_;
    askmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FriendAsk::set_allocated_askmessage(::std::string* askmessage) {
  if (askmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete askmessage_;
  }
  if (askmessage) {
    set_has_askmessage();
    askmessage_ = askmessage;
  } else {
    clear_has_askmessage();
    askmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:chat.FriendAsk.askmessage)
}

// -------------------------------------------------------------------

// FriendRly

// required int32 sendid = 1;
inline bool FriendRly::has_sendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendRly::set_has_sendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendRly::clear_has_sendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendRly::clear_sendid() {
  sendid_ = 0;
  clear_has_sendid();
}
inline ::google::protobuf::int32 FriendRly::sendid() const {
  // @@protoc_insertion_point(field_get:chat.FriendRly.sendid)
  return sendid_;
}
inline void FriendRly::set_sendid(::google::protobuf::int32 value) {
  set_has_sendid();
  sendid_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendRly.sendid)
}

// required int32 recvid = 2;
inline bool FriendRly::has_recvid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendRly::set_has_recvid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendRly::clear_has_recvid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendRly::clear_recvid() {
  recvid_ = 0;
  clear_has_recvid();
}
inline ::google::protobuf::int32 FriendRly::recvid() const {
  // @@protoc_insertion_point(field_get:chat.FriendRly.recvid)
  return recvid_;
}
inline void FriendRly::set_recvid(::google::protobuf::int32 value) {
  set_has_recvid();
  recvid_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendRly.recvid)
}

// required int32 reply = 3;
inline bool FriendRly::has_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendRly::set_has_reply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendRly::clear_has_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendRly::clear_reply() {
  reply_ = 0;
  clear_has_reply();
}
inline ::google::protobuf::int32 FriendRly::reply() const {
  // @@protoc_insertion_point(field_get:chat.FriendRly.reply)
  return reply_;
}
inline void FriendRly::set_reply(::google::protobuf::int32 value) {
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendRly.reply)
}

// -------------------------------------------------------------------

// FriendAck

// required int32 fromid = 1;
inline bool FriendAck::has_fromid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendAck::set_has_fromid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendAck::clear_has_fromid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendAck::clear_fromid() {
  fromid_ = 0;
  clear_has_fromid();
}
inline ::google::protobuf::int32 FriendAck::fromid() const {
  // @@protoc_insertion_point(field_get:chat.FriendAck.fromid)
  return fromid_;
}
inline void FriendAck::set_fromid(::google::protobuf::int32 value) {
  set_has_fromid();
  fromid_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendAck.fromid)
}

// required int32 toid = 2;
inline bool FriendAck::has_toid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendAck::set_has_toid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendAck::clear_has_toid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendAck::clear_toid() {
  toid_ = 0;
  clear_has_toid();
}
inline ::google::protobuf::int32 FriendAck::toid() const {
  // @@protoc_insertion_point(field_get:chat.FriendAck.toid)
  return toid_;
}
inline void FriendAck::set_toid(::google::protobuf::int32 value) {
  set_has_toid();
  toid_ = value;
  // @@protoc_insertion_point(field_set:chat.FriendAck.toid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat::ChatMessage_MsgType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::ChatMessage_MsgType>() {
  return ::chat::ChatMessage_MsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
